{"version":3,"sources":["services/persons.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","response","data","person","post","id","delete","console","log","put","Search","handleSearchChange","onChange","PersonForm","props","onSubmit","addName","value","newName","handleNameChange","newNumber","handleNumberChange","type","NumberDisplay","personsFiltered","handleDelete","map","className","key","name","number","onClick","App","useState","persons","setPersons","setNewName","setNewNumber","message","style","notification","setNotification","useEffect","personService","catch","error","Notification","notificationDetails","undefined","color","background","fontSize","borderStyle","borderRadius","padding","marginBottom","searchName","setSearchName","filter","toLowerCase","includes","event","target","preventDefault","some","existingPerson","find","window","confirm","changedPersons","p","setTimeout","concat","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e619da38.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n   const request = axios.get(baseUrl)\r\n   return request.then(response => response.data)\r\n}\r\n\r\nconst create = (person) => {\r\n    const request = axios.post(baseUrl, person)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst deletePerson = (id) => {\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst change = (id, person) => {\r\n    console.log('executed')\r\n    console.log(`${baseUrl}/${id}`)\r\n    console.log('object, number', person)\r\n    const request = axios.put(`${baseUrl}/${id}`, person )\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default {\r\n    getAll, create, deletePerson, change\r\n}","import React, { useState, useEffect } from 'react'\nimport personService from './services/persons'\n\nconst Search = ({ handleSearchChange }) => {\n  return (\n    <div>Search for a Person\n      <input onChange={handleSearchChange} />\n    </div>\n  )\n}\n\nconst PersonForm = (props) => {\n  return (\n    <div>\n      <form onSubmit={props.addName}>\n        <div>Name <input value={props.newName} onChange={props.handleNameChange} /></div>\n        <div>Number <input value={props.newNumber} onChange={props.handleNumberChange} /></div>\n        <div><button type=\"submit\" >Add</button></div>\n      </form>\n    </div>\n  )\n}\nconst NumberDisplay = ({personsFiltered, handleDelete}) => {\n  \n  return (\n    <div>\n      <ul>\n        {personsFiltered.map(person =>\n          <li className='person' key={person.name}>\n            {console.log('iddid', person.id)}{person.name} {person.number} <button onClick={() => handleDelete(person.id)}>Delete</button>\n          </li>\n        )}\n      </ul>\n    </div>\n  )\n}\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [notification, setNotification] = useState({message: null, style: null})\n\n  useEffect(() => {\n    let i = 0\n    console.log('effect ', i )\n   personService.getAll()\n    .then(response => {\n      setPersons(response)\n    }).catch(error => {\n      console.log('error')\n      \n    })\n  }, [])\n\n  const Notification = ({notificationDetails}) => {\n    console.log(notificationDetails)\n    const error = {\n      color: 'red',\n      background: 'lightgrey',\n      fontSize: 20,\n      borderStyle: 'solid',\n      borderRadius: 5,\n      padding: 10,\n      marginBottom: 10\n    }\n\n    const success = {\n      color: 'green',\n      background: 'lightgrey',\n      fontSize: 20,\n      borderStyle: 'solid',\n      borderRadius: 5,\n      padding: 10,\n      marginBottom: 10\n    }\n    if (notificationDetails.message === null) return null\n    let style = undefined\n\n    if (notificationDetails.style === 'success')\n    style = success\n\n    if (notificationDetails.style === 'error')\n    style = error\n\n    return (\n      <div style={style}>\n        {notificationDetails.message}\n      </div>\n    )\n  }\n\n  const addName = (event) => {\n    event.preventDefault()\n    if (persons.some(person => person.name === newName)) {\n      let existingPerson = persons.find(person => person.name === newName)\n      if (window.confirm(`${existingPerson.name} already exists in the phonebook, replace the old with the new number?`)){\n        personService.change(existingPerson.id, {...existingPerson, number: newNumber}).then(response => {\n          const changedPersons = persons.map(p => p.id !== existingPerson.id ? p : {...p, number: newNumber} )\n\n          setPersons(changedPersons)\n          setNewName('')\n          setNewNumber('')\n        })\n        .catch(error => {\n          setNotification({message: `${existingPerson.name} is not found on the server`, style: 'error'})\n          setTimeout(() => setNotification({message: null}), 5000)\n        })\n      }\n      return\n    }\n\n    const person = {\n      name: newName,\n      number: newNumber\n    }\n\n    console.log(newName)\n    personService.create(person).then(response => {\n      setPersons(persons.concat(response))\n      setNewName('')\n      setNewNumber('')\n      setNotification(({message: `Added ${response.name} to the Phonebook`, style: 'success'}))\n      setTimeout(() => setNotification({message: null}), 5000)\n    })\n  }\n\n  const handleDelete = (id) => {\n    if (window.confirm(\"hi\")){\n      personService.deletePerson(id)\n      setPersons(persons.filter(person => person.id !== id))\n    }\n  }\n\n  const handleNameChange = (event) => {\n    console.log(event.target.value)\n    setNewName(event.target.value)\n  }\n  const handleNumberChange = (event) => {\n    console.log(event.target.value)\n    setNewNumber(event.target.value)\n  }\n\n  const handleSearchChange = (event) => {\n    console.log(event.target.value)\n    setSearchName(event.target.value)\n  }\n\n  const [searchName, setSearchName] = useState('')\n\n  const personsFiltered = searchName ?\n    persons.filter(person =>\n      person.name.toLowerCase().includes(searchName.toLowerCase())) : persons\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <Notification notificationDetails={notification}/>\n      <Search handleSearchChange={handleSearchChange} />\n      <h2>Add a new</h2>\n      <PersonForm addName={addName} newName={newName} newNumber={newNumber} handleNameChange={handleNameChange} handleNumberChange={handleNumberChange} />\n      <h2>Numbers</h2>\n      <NumberDisplay personsFiltered={personsFiltered} handleDelete={handleDelete}/>\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}